// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  name              String?
  username          String?           @unique
  email             String            @unique
  password          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  points            Int               @default(0)
  isAdmin           Boolean           @default(false)
  submissions       Submission[]
  solvedProblems    SolvedProblem[]
  codeDraft         CodeDraft[]
}

model Problem {
  id                  String            @id @default(uuid())
  title               String            @unique
  problemStatement    String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  points              Int
  difficulty          Difficulty
  tags                Tag[]  @relation("ProblemTags")
  solutions           Submission[]
  testCases           TestCases[]
  solvedBy            SolvedProblem[]
  codeDraft           CodeDraft[]
  codeTemplate        CodeTemplate[]
}

model Submission {
  id             String             @id @default(uuid())
  code           String
  language       Language
  userId         String
  problemId      String
  status         SubmissionStatus
  user           User               @relation(fields: [userId], references: [id])
  problem        Problem            @relation(fields: [problemId], references: [id])
  createdAt      DateTime           @default(now())
}

model TestCases {
  id             String     @id @default(uuid())
  input          Json
  output         Json
  problemId      String
  problem        Problem    @relation(fields: [problemId], references: [id])
}

model Tag {
  id       String   @id @default(uuid())
  name     String   @unique  // Ensures unique tag names
  problems Problem[] @relation("ProblemTags") // Fixed Many-to-Many
}

model SolvedProblem {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem    @relation(fields: [problemId], references: [id])
  problemId String
  solvedAt  DateTime   @default(now())

  @@unique([userId, problemId])
}

model CodeDraft {
  id        String     @id @default(uuid())
  userId    String
  user      User @relation(fields: [userId], references: [id])
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id])
  code      String
  language  Language
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([problemId, userId])
}

model CodeTemplate {
  id        String    @id @default(uuid())
  code      String
  language  Language
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Language {
  JAVASCRIPT
  PYTHON
  JAVA
  CPLUSPLUS
  CSHARP
  RUBY
}

enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  ERROR
}
